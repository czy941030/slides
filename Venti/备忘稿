备忘稿


概要
Venti 是一种用于数据归档的网络存储系统
它可以作为许多存储应用的内建模块，例如
	逻辑备份
	物理备份
	快照系统
它的主要思想是把数据分成大小可变的一些块
用一个块的内容的hash值来唯一标识一个块
通过一种只写一次的策略防止数据被恶意破坏，保证归档安全
通过合并相同的块，来提高归档存储的效率


为什么要归档
归档是为了长期存储或永久存储一些数据
这些数据可能不是十分常用，但一旦用到，对于需要使用的用户来说，这些数据可能非常宝贵
比如说系统的备份文件，日志文件等
这些数据往往非常大


过去比较常见的做法是通过磁带来归档文件
用户通过 tar ufsdump 等工具把需要备份的数据打成包，然后提交给服务器记录在磁带上归档
备份的方式主要有两种：全局归档和增量备份
全局备份每次备份时都要占用庞大的空间
增量备份每次只备份与之前的备份有差异的内容
但恢复起来十分麻烦，需要先恢复最近的一次全局备份，然后依次恢复增量备份

磁带备份有很多问题：
恢复数据是一个非常繁杂的工作
容易出错，比如磁带编号丢了
备份的磁带非常占地方，管理很麻烦
于是快照系统出现了


快照是系统在某一个时刻的只读的映像
每个快照都包含了完整的文件目录树，可以回复出整个系统，从这一点来看，它很像完整备份
但快照在实现的时候，共享了文件系统中一些保持不变的文件，节约了空间，又像一个增量备份
同时，快照必须做到支持比较方便的随机访问
由于快照只需要是只读的，有些文件系统例如 Plan 9 通过光碟来存储快照文件


Venti
Venti 的目的是提供一供多个用户和应用使用的，只写一次策略的归档仓库
而 Venti 本身不提供归档服务，只是作为应用的后台存在
Venti 把每个块的内容的 SHA－1 hash 值作为每个块唯一的地址，称为块的指纹
同时 Venti 使用了只写一次的策略，一个块一旦被写入，就不能再更改
当一个块修改后，会在新的地址重新写入


为什么使用 SHA－1 呢？
SHA－1 是由美国国家标准和技术研究院提出的 hash 函数
它的输出一个 160 位，20 字节的 hash 值
SHA－1 作为一个 Universal hash， 每个 key 是被等概率映射的
整个系统包含至少一个冲突的概率满足如下条件
其中 n 为块的个数， b 为 hash 输出的位数
于是考虑一个 1EB 的数据的存储结构，发生碰撞的概率非常低
同时，SHA－1的变种提供了256位、384位，甚至512位的输出，为未来的使用提供了扩展


多个用户可以共用一个 Venti 服务器
只要提供了对应块的指纹，就可以进行访问
当多个用户归档的块出现重复的时候，由于可以合并形同的块，反而提高了空间的利用率。
而用户归档重复的块是非常可能的，比如他们可能使用相同的操作系统
在这个框架下，数据的完整性检查也比较容易进行
同时由于 Venti 的结构简单，可以比较容易地进行缓存
Venti 使用磁盘作为存储介质，可以使归档数据的访问达到类似非归档数据的访问效率


数据被分割成blocks写到服务器上
用户想从服务器上获取存储的块，必须提供块的指纹
同时，用户也可以把块的指纹绑成一个新的块，并写道服务器上，我们称它为指针块
如此递归这么操作，可以把数据组织称类似一颗树的结构
而用户最终只需保存树根的指纹，以及存储的方式，就可以从服务器读取所有数据
应用可以通过这样的方式把单个文件或者整个磁盘备份
下面给出了一个顺序文件存储在 Venti 服务器上的图示


在 Venti 上，这样的树不允许被修改
但如果对于比较少的修改，新的树可以通过上传改动的块，和重用没有修改的块非常高效地在服务器上建立起来
下面的一张图给出了如何在已有的树上建立新的树的方式
通过指纹指针和数据混合的块，我们可以在 Venti 存储更复杂的结构
比如，我们甚至可以通过分离目录，指针和数据的方式，以一定结构，把一个文件系统备份到服务器上


Vac是一种类似于 tar 和 zip 的应用
它将选定的目录和文件归档到 Venti 服务器上，并生成一个 45 字节的输出
不论多大的数据都会被归档为一个 45 字节的文件
用户可以通过 unvac 和 vac 的输出从服务器上把数据恢复出来
vac 把每个文件储存为单独的一组块，这样，但用户反复上传一个文件，
或者多用户共同上传一个文件会被合并为一个副本
vac 提供了一个增量备份的选项
由于重复块只保留一个备份的特性，完整备份和增量备份效果是相同的
不过增量备份通过文件的修改时间，判断没有修改的文件，利用把指针 block 中的指纹用以前上传的指纹代替
减少了向 Venti 服务器上传的数据的数量，从而提高了效率


