备忘稿


概要
Venti 是一种用于数据归档的网络存储系统
它可以作为许多存储应用的内建模块，例如
	逻辑备份
	物理备份
	快照系统
它的主要思想是把数据分成大小可变的一些块
用一个块的内容的hash值来唯一标识一个块
通过一种只写一次的策略防止数据被恶意破坏，保证归档安全
通过合并相同的块，来提高归档存储的效率


为什么要归档
归档是为了长期存储或永久存储一些数据
这些数据可能不是十分常用，但一旦用到，对于需要使用的用户来说，这些数据可能非常宝贵
比如说系统的备份文件，日志文件等
这些数据往往非常大


过去比较常见的做法是通过磁带来归档文件
用户通过 tar ufsdump 等工具把需要备份的数据打成包，然后提交给服务器记录在磁带上归档
备份的方式主要有两种：全局归档和增量备份
全局备份每次备份时都要占用庞大的空间
增量备份每次只备份与之前的备份有差异的内容
但恢复起来十分麻烦，需要先恢复最近的一次全局备份，然后依次恢复增量备份

磁带备份有很多问题：
恢复数据是一个非常繁杂的工作
容易出错，比如磁带编号丢了
备份的磁带非常占地方，管理很麻烦
于是快照系统出现了


快照是系统在某一个时刻的只读的映像
每个快照都包含了完整的文件目录树，可以回复出整个系统，从这一点来看，它很像完整备份
但快照在实现的时候，共享了文件系统中一些保持不变的文件，节约了空间，又像一个增量备份
同时，快照必须做到支持比较方便的随机访问
由于快照只需要是只读的，有些文件系统例如 Plan 9 通过光碟来存储快照文件


Venti
Venti 的目的是提供一供多个用户和应用使用的，只写一次策略的归档仓库
而 Venti 本身不提供归档服务，只是作为应用的后台存在
Venti 把每个块的内容的 SHA－1 hash 值作为每个块唯一的地址，称为块的指纹
同时 Venti 使用了只写一次的策略，一个块一旦被写入，就不能再更改
当一个块修改后，会在新的地址重新写入


为什么使用 SHA－1 呢？
SHA－1 是由美国国家标准和技术研究院提出的 hash 函数
它的输出一个 160 位，20 字节的 hash 值
SHA－1 作为一个 Universal hash， 每个 key 是被等概率映射的
整个系统包含至少一个冲突的概率满足如下条件
其中 n 为块的个数， b 为 hash 输出的位数
于是考虑一个 1EB 的数据的存储结构，发生碰撞的概率非常低
同时，SHA－1的变种提供了256位、384位，甚至512位的输出，为未来的使用提供了扩展


多个用户可以共用一个 Venti 服务器
只要提供了对应块的指纹，就可以进行访问
当多个用户归档的块出现重复的时候，由于可以合并形同的块，反而提高了空间的利用率。
而用户归档重复的块是非常可能的，比如他们可能使用相同的操作系统
在这个框架下，数据的完整性检查也比较容易进行
同时由于 Venti 的结构简单，可以比较容易地进行缓存
Venti 使用磁盘作为存储介质，可以使归档数据的访问达到类似非归档数据的访问效率


数据被分割成blocks写到服务器上
用户想从服务器上获取存储的块，必须提供块的指纹
同时，用户也可以把块的指纹绑成一个新的块，并写道服务器上，我们称它为指针块
如此递归这么操作，可以把数据组织称类似一颗树的结构
而用户最终只需保存树根的指纹，以及存储的方式，就可以从服务器读取所有数据
应用可以通过这样的方式把单个文件或者整个磁盘备份
下面给出了一个顺序文件存储在 Venti 服务器上的图示


在 Venti 上，这样的树不允许被修改
但如果对于比较少的修改，新的树可以通过上传改动的块，和重用没有修改的块非常高效地在服务器上建立起来
下面的一张图给出了如何在已有的树上建立新的树的方式
通过指纹指针和数据混合的块，我们可以在 Venti 存储更复杂的结构
比如，我们甚至可以通过分离目录，指针和数据的方式，以一定结构，把一个文件系统备份到服务器上


Vac是一种类似于 tar 和 zip 的归档应用
它将选定的目录和文件归档到 Venti 服务器上，
不论多大的数据都会被归档为一个 45 字节的文件
用户可以通过 unvac 和 vac 的输出从服务器上把数据恢复出来
vac 把每个文件储存为单独的一组块，这样，但用户反复上传一个文件，
或者多用户共同上传一个文件会被合并为一个副本
vac 提供了一个增量备份的选项
由于重复块只保留一个备份的特性，完整备份和增量备份效果是相同的
不过增量备份通过文件的修改时间，判断没有修改的文件，利用把指针 block 中的指纹用以前上传的指纹代替
减少了向 Venti 服务器上传的数据的数量，从而提高了效率


vac, tar 和 dump 都是文件和逻辑级别的归档方式
它们把文件和目录组织成具有一定内部结构的整体
另一种思路是进行块级别的物理级别归档
也就是说，直接把磁盘中未经处理的块直接以顺序存储的形式上传到服务器
以合并相同的块，是 venti 不同于其他方式的最大优点
由于 venti 直接比较方便的随机访问，如果操作系统支持，可以直接从服务器挂载只读的 Venti 归档
即使当全局的恢复需要进行时，这种恢复也可以是 lazy 的，在需要修改的时候，再恢复出来


作者认为如果给 Venti 结合上一个读写少量数据的存储机制
Venti 不仅可以作为归档机制，甚至可以作为一个文件系统
作者使用的 Plan 9 文件系统，把文件存储在机械磁盘和光盘的复合结构中
用光盘永久存储快照，磁盘作为两次快照之间的缓存机制
由于切换光盘非常慢，导致影响了 Plan 9 的效率
如果把光盘换成 Venti，由于 Venti 可以达到课余磁盘读写相比的效率
能大大提高文件系统的效率


作者设计了一个 Venti 的原型机
Venti 主要有两部分构成，数据和索引
对于 Venti 的数据块，使用了一种只附加式的日志记录方式
这种只附加式的日志记录方式避免了因为软件错误而导致的数据丢失
为了保证数据的安全，数据快用一个 RAID－5 IDE磁盘阵列存储，这样可以避免单一磁盘损坏带来的损失
对于索引，Venti 使用了一个磁盘驻留的 hash 表
整个表被分为一些等大小的桶
为了提高检索效率，这些桶被条带化后均匀的分在 8 块 10000 转 SCSI 硬盘上
对于索引，只要求效率，并不要求很高的可靠性，作者设计了一套可以由数据块恢复出索引的机制
为了进一步提高效率，Venti 的原型机上还设计了高速缓存和缓冲区写入机制


具体看一下 Venti 数据块部分的存储结构
整个数据块存储部分被分为了一些等大的 arena
每个 arena 按照地址高低被分成了数据块部分和目录部分，分别从地址高处和低处开始增长
每个 data block 包含一个头和数据，
头包含了一个 magic number，每个块的指纹，用户定义的类型标示符，
块的大小，第一次写入的用户，第一次写入时间
另外在每个块被写入的时候，会尝试进行压缩，encoding 记录了是否进行压缩，压缩的编码是什么
esize 记录了压缩后的大小
而目录部分则是这个 arena 中 data block header的一个副本，以及对应的data block在arena中的偏移
通过目录，可以很方便的建立出所有 data block 的索引
由于一次写入的策略 Venti 中的块是不等大的，这也使得 Venti 可以没有碎片
当一个 arena 写满以后，就被封闭起来，再也不往里面写入
这个时候可以用可移动存储介质将这个 arena 备份一下，保护数据


Venti 索引部分的存储结构
作者通过一个 hash 函数，将每个 block 映射到等大的一些桶中
每个桶和 SCSI 磁盘的扇区是等大的
在每个桶中，存储的条目是按照指纹升序排列的，内部可以通过二分查找找到条目
条目里的内容很简单，就是指纹，块的类型，大小和地址
整个索引的大小远超过了存储能力范围，一般来说，桶是不会溢出的，如果溢出了，就简单地放到相邻的桶中


关于 Venti 在实际数据上的表现
首先是在速率方面
下面的图标比较了没有加缓存和加了两种缓存机制的读写效率
为了方便比较，作者引入了不经处理直接往 SCSI 磁盘 RAID 阵列中写的速率
我们可以看到 Venti 比直接磁盘读写还是有一定速度差异的
但作为一个归档系统，可以与磁盘读写速率在同一个数量级上已经相当可观了


相比其他归档系统，Venti 最大的优点在于可以合并重复写入的块
所以 Venti 使相当节约空间的，下面的试验说明了这一点
作者选取的两个试验集是两个基于 Plan 9 文件系统的数据仓库总共近 10 年的数据
数据仓库为超过 500 个用户服务，包含了象棋游戏，气象数据，卫星数据，多媒体数据等杂乱的数据
上面两张图最下面的线是两个数据仓库活跃的文件系统的大小
最上面的线是 Plan 9 文件系统用光盘存储的备份的快照文件的大小
中间一条线是改用 Venti 后归档快照数据的文件的大小
下面两张图表示了光盘和Venti存储的数据分别是活跃文件系统的多少倍
可以看到Venti是非常省空间的
作者认为这主要是由于如下几个方面
	合并了重复写入的块
	块的减少了内部碎片
	尝试对数据进行了压缩


后面一张图给出了上面三个因素所减少数据大小的百分比
由于左边文件系统中使用的6K大小的页，右边使用的是16K大小的页
所以通过减少内部碎片减少存储数据量显得更加明显


结论
通过 SHA－1 hash 值标示块是归档时一种非常有效的手段
只写一次的策略和合并重复写入块的能力使得 Venti 成为一种非超有用的，许多有趣的存储应用的内建模块
随着磁盘容量的增长我们似乎不必为了节约空间而花时间删除老的没用的归档
最总的结论 Venti 提供了一种非常有吸引力的归档的手段